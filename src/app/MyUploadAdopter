export class MyUploadAdapter {
    loader: any;
    xhr: any;
    constructor( loader ) {
        this.loader = loader;
    }
    upload() {
        return this.loader.file
            .then( file => new Promise( ( resolve, reject ) => {
                this._initRequest();
                this._initListeners( resolve, reject, file );
                this._sendRequest( file );
            } ) );
    }
    abort() {
        if ( this.xhr ) {
            this.xhr.abort();
        }
    }
    _initRequest() {
        debugger;
        const xhr = this.xhr = new XMLHttpRequest();
        const formData = new FormData();
        formData.append('file', this.loader.file); // Include the file in the FormData
        xhr.open('POST', 'http://localhost:9999/tpms/addFile', true);
    
        // Set up event listeners
        xhr.onreadystatechange = () => {
            debugger;
            if (xhr.readyState === XMLHttpRequest.DONE) {
                if (xhr.status === 200) {
                    
                    const response = JSON.parse(xhr.responseText);
                    resolve(response); 
                } else {
                    
                    reject('Failed to upload file');
                }
            }
        };
    
        // Send the FormData with the file
        xhr.send(formData);
    }
    
    _initListeners( resolve, reject, file ) {
        debugger;
        const xhr = this.xhr;
        const loader = this.loader;
        const genericErrorText = `Couldn't upload file: ${ file.name }.`;
        xhr.addEventListener( 'error', () => reject( genericErrorText ) );
        xhr.addEventListener( 'abort', () => reject() );
        xhr.addEventListener( 'load', () => {
            const response = xhr.response;
            if ( !response || response.error ) {
                return reject( response && response.error ? response.error.message : genericErrorText );
            }
            resolve( {
                default: response.url
            } );
        } );
        if ( xhr.upload ) {
            xhr.upload.addEventListener( 'progress', evt => {
                if ( evt.lengthComputable ) {
                    loader.uploadTotal = evt.total;
                    loader.uploaded = evt.loaded;
                }
            } );
        }
    }
    _sendRequest( file ) {
        const data = new FormData();
        data.append( 'upload', file );
        this.xhr.send( data );
    }
}

function resolve(response: any) {
    throw new Error("Function not implemented.");
}
function reject(arg0: string) {
    throw new Error("Function not implemented.");
}

